import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              12,
            ),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Color(0XFFFFFFFF),
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: appTheme.blueGray100,
              width: 1,
            ),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: WidgetStateColor.resolveWith((states) {
          if (states.contains(WidgetState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: WidgetStateColor.resolveWith((states) {
          if (states.contains(WidgetState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray200,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.blueGray900,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray600,
          fontSize: getFontSize(
            13,
          ),
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: appTheme.blueGray900,
          fontSize: getFontSize(
            36,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: appTheme.blueGray900,
          fontSize: getFontSize(
            28,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.blueGray900,
          fontSize: getFontSize(
            24,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.blueGray900,
          fontSize: getFontSize(
            20,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: getFontSize(
            18,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF62B47F),
    primaryContainer: Color(0XFF292D32),
    secondary: Color(0XFF292D32),
    secondaryContainer: Color(0XFF62B47F),
    tertiary: Color(0XFF292D32),
    tertiaryContainer: Color(0XFF62B47F),

    // Surface colors
    surface: Color(0XFF292D32),
    surfaceTint: Color(0XFF292D32),
    surfaceContainerHighest: Color(0XFF62B47F),

    // Error colors
    error: Color(0XFF292D32),
    errorContainer: Color(0XFF62B47F),
    onError: Color(0XFFFEF3EC),
    onErrorContainer: Color(0XFF292D32),
    onInverseSurface: Color(0XFFFEF3EC),
    onPrimary: Color(0XFF292D32),
    onPrimaryContainer: Color(0XFFFEF3EC),
    onSecondary: Color(0XFFFEF3EC),
    onSecondaryContainer: Color(0XFF292D32),
    onTertiary: Color(0XFFFEF3EC),
    onTertiaryContainer: Color(0XFF292D32),

    // Other colors
    outline: Color(0XFF292D32),
    outlineVariant: Color(0XFF292D32),
    scrim: Color(0XFF292D32),
    shadow: Color(0XFF292D32),

    // Inverse colors
    inversePrimary: Color(0XFF292D32),
    inverseSurface: Color(0XFF292D32),

    // Pending colors
    onSurface: Color(0XFFFEF3EC),
    onSurfaceVariant: Color(0XFF292D32),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => Color(0XFFFFC107);

  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFCECECE);
  Color get blueGray300 => Color(0XFFA3A3B5);
  Color get blueGray400 => Color(0XFF888888);
  Color get blueGray500 => Color(0XFF5F619D);
  Color get blueGray900 => Color(0XFF333333);

  // DeepPurple
  Color get deepPurple400 => Color(0XFF694ACD);

  // Gray
  Color get gray100 => Color(0XFFF8F8F8);
  Color get gray200 => Color(0XFFE7E7E7);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray600 => Color(0XFF7C7C7C);
  Color get gray90014 => Color(0X140D0A2C);

  // Green
  Color get greenA700 => Color(0XFF04B155);

  // Indigo
  Color get indigo50 => Color(0XFFE7E7FF);
  Color get indigoA400 => Color(0XFF4E4FDC);

  // Red
  Color get red400 => Color(0XFFD75A58);
  Color get red700 => Color(0XFFD83636);
  Color get redA200 => Color(0XFFFB5C5C);

  // Teal
  Color get teal400 => Color(0XFF2A8BB5);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
  Color get white =>  Colors.white;
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get   theme => ThemeHelper().themeData(
);
